name: Test

on:
  push:
    branches:
      - '**'

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python: [3.6, 3.7, 3.8, 3.9]
        include:
          - python: 3.6
            python-name: cp36
          - python: 3.7
            python-name: cp37
          - python: 3.8
            python-name: cp38
          - python: 3.9
            python-name: cp39

    steps:
    - uses: actions/checkout@v2
    - name: Setup Python environment
      uses: actions/setup-python@v2
      with:
        # Version range or exact version of a Python version to use, using semvers version range syntax.
        python-version: ${{ matrix.python }} # optional, default is 3.x
        # The target architecture (x86, x64) of the Python interpreter.
        architecture: x64 # optional, default is x64
    - name: Set up a Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        # The toolchain name, such as stable, nightly, or 1.8.0
        toolchain: stable # optional, default is stable
        # The toolchain components to install, comma-separated
        components: clippy # optional, default is
        # The toolchain targets to add, comma-separated
        # targets: # optional, default is
    - name: Install build dependencies
      run: pip install maturin jupyter numpy flake8
    - name: Cache cargo-edit
      uses: actions/cache@v2
      id: cache-cargo-edit
      with:
        key: cargo-edit-${{ matrix.os }}
        path: |
          ~/.cargo/bin/cargo-add
          ~/.cargo/bin/cargo-rm
    - name: Install cargo-edit
      if: steps.cache-cargo-edit.outputs.cache-hit != 'true'
      run: cargo install cargo-edit
    - name: Check flake8
      run: flake8
    - name: Check clippy
      run: cargo clippy
    - name: Build wheel
      run: |
        maturin build --release
        ls target/wheels
    - uses: actions/upload-artifact@v1
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.python-name}}
        path: target/wheels
    - name: Install wheel
      shell: bash
      run: pip install target/wheels/rustdef-*${{ matrix.python-name }}*.whl
    - name: Execute examples
      shell: bash
      run: jupyter-nbconvert --to html --debug --stdout --ExecutePreprocessor.timeout=-1 --execute 'Get started.ipynb' types.ipynb numpy.ipynb
      working-directory: examples

  test:
    needs: build

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python: [3.6, 3.7, 3.8, 3.9]
        include:
          - python: 3.6
            python-name: cp36
          - python: 3.7
            python-name: cp37
          - python: 3.8
            python-name: cp38
          - python: 3.9
            python-name: cp39

    steps:
    - uses: actions/download-artifact@v1
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.python-name }}
        path: wheels
    - name: Setup Python environment
      uses: actions/setup-python@v2
      with:
        # Version range or exact version of a Python version to use, using semvers version range syntax.
        python-version: ${{ matrix.python }} # optional, default is 3.x
        # The target architecture (x86, x64) of the Python interpreter.
        architecture: x64 # optional, default is x64
    - name: Set up a Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        # The toolchain name, such as stable, nightly, or 1.8.0
        toolchain: stable # optional, default is stable
        # The toolchain components to install, comma-separated
        # components: # optional, default is
        # The toolchain targets to add, comma-separated
        # targets: # optional, default is
    - name: Install wheel
      run: pip install wheels/rustdef-*${{ matrix.python-name }}*.whl
    - name: Install additional dependencies
      run: pip install numpy
    - name: Cache cargo-edit
      uses: actions/cache@v2
      id: cache-cargo-edit
      with:
        key: cargo-edit-${{ matrix.os }}
        path: |
          ~/.cargo/bin/cargo-add
          ~/.cargo/bin/cargo-rm
    - name: Install cargo-edit
      if: steps.cache-cargo-edit.outputs.cache-hit != 'true'
      run: cargo install cargo-edit
    - uses: actions/checkout@v2
    - name: Execute examples
      shell: bash
      run: jupyter-nbconvert --to html --debug --stdout --ExecutePreprocessor.timeout=-1 --execute 'Get started.ipynb' types.ipynb numpy.ipynb
      working-directory: examples
